/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef CThriftDemoInterface_H
#define CThriftDemoInterface_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "ThriftDemoInterface_types.h"

namespace demo_thrift {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class CThriftDemoInterfaceIf {
 public:
  virtual ~CThriftDemoInterfaceIf() {}
  virtual int32_t ConfigBlades(const std::vector< ::sonicationhal_thrift::CMyType> & TypeList, const  ::sonicationhal_thrift::CMyType& OneType) = 0;
  virtual int32_t ConfigBladesByJson(const std::string& ConfigJson) = 0;
};

class CThriftDemoInterfaceIfFactory {
 public:
  typedef CThriftDemoInterfaceIf Handler;

  virtual ~CThriftDemoInterfaceIfFactory() {}

  virtual CThriftDemoInterfaceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(CThriftDemoInterfaceIf* /* handler */) = 0;
};

class CThriftDemoInterfaceIfSingletonFactory : virtual public CThriftDemoInterfaceIfFactory {
 public:
  CThriftDemoInterfaceIfSingletonFactory(const ::apache::thrift::stdcxx::shared_ptr<CThriftDemoInterfaceIf>& iface) : iface_(iface) {}
  virtual ~CThriftDemoInterfaceIfSingletonFactory() {}

  virtual CThriftDemoInterfaceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(CThriftDemoInterfaceIf* /* handler */) {}

 protected:
  ::apache::thrift::stdcxx::shared_ptr<CThriftDemoInterfaceIf> iface_;
};

class CThriftDemoInterfaceNull : virtual public CThriftDemoInterfaceIf {
 public:
  virtual ~CThriftDemoInterfaceNull() {}
  int32_t ConfigBlades(const std::vector< ::sonicationhal_thrift::CMyType> & /* TypeList */, const  ::sonicationhal_thrift::CMyType& /* OneType */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t ConfigBladesByJson(const std::string& /* ConfigJson */) {
    int32_t _return = 0;
    return _return;
  }
};

typedef struct _CThriftDemoInterface_ConfigBlades_args__isset {
  _CThriftDemoInterface_ConfigBlades_args__isset() : TypeList(false), OneType(false) {}
  bool TypeList :1;
  bool OneType :1;
} _CThriftDemoInterface_ConfigBlades_args__isset;

class CThriftDemoInterface_ConfigBlades_args {
 public:

  CThriftDemoInterface_ConfigBlades_args(const CThriftDemoInterface_ConfigBlades_args&);
  CThriftDemoInterface_ConfigBlades_args& operator=(const CThriftDemoInterface_ConfigBlades_args&);
  CThriftDemoInterface_ConfigBlades_args() {
  }

  virtual ~CThriftDemoInterface_ConfigBlades_args() throw();
  std::vector< ::sonicationhal_thrift::CMyType>  TypeList;
   ::sonicationhal_thrift::CMyType OneType;

  _CThriftDemoInterface_ConfigBlades_args__isset __isset;

  void __set_TypeList(const std::vector< ::sonicationhal_thrift::CMyType> & val);

  void __set_OneType(const  ::sonicationhal_thrift::CMyType& val);

  bool operator == (const CThriftDemoInterface_ConfigBlades_args & rhs) const
  {
    if (!(TypeList == rhs.TypeList))
      return false;
    if (!(OneType == rhs.OneType))
      return false;
    return true;
  }
  bool operator != (const CThriftDemoInterface_ConfigBlades_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CThriftDemoInterface_ConfigBlades_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CThriftDemoInterface_ConfigBlades_pargs {
 public:


  virtual ~CThriftDemoInterface_ConfigBlades_pargs() throw();
  const std::vector< ::sonicationhal_thrift::CMyType> * TypeList;
  const  ::sonicationhal_thrift::CMyType* OneType;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CThriftDemoInterface_ConfigBlades_result__isset {
  _CThriftDemoInterface_ConfigBlades_result__isset() : success(false) {}
  bool success :1;
} _CThriftDemoInterface_ConfigBlades_result__isset;

class CThriftDemoInterface_ConfigBlades_result {
 public:

  CThriftDemoInterface_ConfigBlades_result(const CThriftDemoInterface_ConfigBlades_result&);
  CThriftDemoInterface_ConfigBlades_result& operator=(const CThriftDemoInterface_ConfigBlades_result&);
  CThriftDemoInterface_ConfigBlades_result() : success(0) {
  }

  virtual ~CThriftDemoInterface_ConfigBlades_result() throw();
  int32_t success;

  _CThriftDemoInterface_ConfigBlades_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const CThriftDemoInterface_ConfigBlades_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CThriftDemoInterface_ConfigBlades_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CThriftDemoInterface_ConfigBlades_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CThriftDemoInterface_ConfigBlades_presult__isset {
  _CThriftDemoInterface_ConfigBlades_presult__isset() : success(false) {}
  bool success :1;
} _CThriftDemoInterface_ConfigBlades_presult__isset;

class CThriftDemoInterface_ConfigBlades_presult {
 public:


  virtual ~CThriftDemoInterface_ConfigBlades_presult() throw();
  int32_t* success;

  _CThriftDemoInterface_ConfigBlades_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _CThriftDemoInterface_ConfigBladesByJson_args__isset {
  _CThriftDemoInterface_ConfigBladesByJson_args__isset() : ConfigJson(false) {}
  bool ConfigJson :1;
} _CThriftDemoInterface_ConfigBladesByJson_args__isset;

class CThriftDemoInterface_ConfigBladesByJson_args {
 public:

  CThriftDemoInterface_ConfigBladesByJson_args(const CThriftDemoInterface_ConfigBladesByJson_args&);
  CThriftDemoInterface_ConfigBladesByJson_args& operator=(const CThriftDemoInterface_ConfigBladesByJson_args&);
  CThriftDemoInterface_ConfigBladesByJson_args() : ConfigJson() {
  }

  virtual ~CThriftDemoInterface_ConfigBladesByJson_args() throw();
  std::string ConfigJson;

  _CThriftDemoInterface_ConfigBladesByJson_args__isset __isset;

  void __set_ConfigJson(const std::string& val);

  bool operator == (const CThriftDemoInterface_ConfigBladesByJson_args & rhs) const
  {
    if (!(ConfigJson == rhs.ConfigJson))
      return false;
    return true;
  }
  bool operator != (const CThriftDemoInterface_ConfigBladesByJson_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CThriftDemoInterface_ConfigBladesByJson_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CThriftDemoInterface_ConfigBladesByJson_pargs {
 public:


  virtual ~CThriftDemoInterface_ConfigBladesByJson_pargs() throw();
  const std::string* ConfigJson;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CThriftDemoInterface_ConfigBladesByJson_result__isset {
  _CThriftDemoInterface_ConfigBladesByJson_result__isset() : success(false) {}
  bool success :1;
} _CThriftDemoInterface_ConfigBladesByJson_result__isset;

class CThriftDemoInterface_ConfigBladesByJson_result {
 public:

  CThriftDemoInterface_ConfigBladesByJson_result(const CThriftDemoInterface_ConfigBladesByJson_result&);
  CThriftDemoInterface_ConfigBladesByJson_result& operator=(const CThriftDemoInterface_ConfigBladesByJson_result&);
  CThriftDemoInterface_ConfigBladesByJson_result() : success(0) {
  }

  virtual ~CThriftDemoInterface_ConfigBladesByJson_result() throw();
  int32_t success;

  _CThriftDemoInterface_ConfigBladesByJson_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const CThriftDemoInterface_ConfigBladesByJson_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const CThriftDemoInterface_ConfigBladesByJson_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CThriftDemoInterface_ConfigBladesByJson_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _CThriftDemoInterface_ConfigBladesByJson_presult__isset {
  _CThriftDemoInterface_ConfigBladesByJson_presult__isset() : success(false) {}
  bool success :1;
} _CThriftDemoInterface_ConfigBladesByJson_presult__isset;

class CThriftDemoInterface_ConfigBladesByJson_presult {
 public:


  virtual ~CThriftDemoInterface_ConfigBladesByJson_presult() throw();
  int32_t* success;

  _CThriftDemoInterface_ConfigBladesByJson_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class CThriftDemoInterfaceClient : virtual public CThriftDemoInterfaceIf {
 public:
  CThriftDemoInterfaceClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  CThriftDemoInterfaceClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int32_t ConfigBlades(const std::vector< ::sonicationhal_thrift::CMyType> & TypeList, const  ::sonicationhal_thrift::CMyType& OneType);
  void send_ConfigBlades(const std::vector< ::sonicationhal_thrift::CMyType> & TypeList, const  ::sonicationhal_thrift::CMyType& OneType);
  int32_t recv_ConfigBlades();
  int32_t ConfigBladesByJson(const std::string& ConfigJson);
  void send_ConfigBladesByJson(const std::string& ConfigJson);
  int32_t recv_ConfigBladesByJson();
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class CThriftDemoInterfaceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::apache::thrift::stdcxx::shared_ptr<CThriftDemoInterfaceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (CThriftDemoInterfaceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_ConfigBlades(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_ConfigBladesByJson(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  CThriftDemoInterfaceProcessor(::apache::thrift::stdcxx::shared_ptr<CThriftDemoInterfaceIf> iface) :
    iface_(iface) {
    processMap_["ConfigBlades"] = &CThriftDemoInterfaceProcessor::process_ConfigBlades;
    processMap_["ConfigBladesByJson"] = &CThriftDemoInterfaceProcessor::process_ConfigBladesByJson;
  }

  virtual ~CThriftDemoInterfaceProcessor() {}
};

class CThriftDemoInterfaceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  CThriftDemoInterfaceProcessorFactory(const ::apache::thrift::stdcxx::shared_ptr< CThriftDemoInterfaceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::apache::thrift::stdcxx::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::apache::thrift::stdcxx::shared_ptr< CThriftDemoInterfaceIfFactory > handlerFactory_;
};

class CThriftDemoInterfaceMultiface : virtual public CThriftDemoInterfaceIf {
 public:
  CThriftDemoInterfaceMultiface(std::vector<apache::thrift::stdcxx::shared_ptr<CThriftDemoInterfaceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~CThriftDemoInterfaceMultiface() {}
 protected:
  std::vector<apache::thrift::stdcxx::shared_ptr<CThriftDemoInterfaceIf> > ifaces_;
  CThriftDemoInterfaceMultiface() {}
  void add(::apache::thrift::stdcxx::shared_ptr<CThriftDemoInterfaceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  int32_t ConfigBlades(const std::vector< ::sonicationhal_thrift::CMyType> & TypeList, const  ::sonicationhal_thrift::CMyType& OneType) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ConfigBlades(TypeList, OneType);
    }
    return ifaces_[i]->ConfigBlades(TypeList, OneType);
  }

  int32_t ConfigBladesByJson(const std::string& ConfigJson) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ConfigBladesByJson(ConfigJson);
    }
    return ifaces_[i]->ConfigBladesByJson(ConfigJson);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class CThriftDemoInterfaceConcurrentClient : virtual public CThriftDemoInterfaceIf {
 public:
  CThriftDemoInterfaceConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  CThriftDemoInterfaceConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int32_t ConfigBlades(const std::vector< ::sonicationhal_thrift::CMyType> & TypeList, const  ::sonicationhal_thrift::CMyType& OneType);
  int32_t send_ConfigBlades(const std::vector< ::sonicationhal_thrift::CMyType> & TypeList, const  ::sonicationhal_thrift::CMyType& OneType);
  int32_t recv_ConfigBlades(const int32_t seqid);
  int32_t ConfigBladesByJson(const std::string& ConfigJson);
  int32_t send_ConfigBladesByJson(const std::string& ConfigJson);
  int32_t recv_ConfigBladesByJson(const int32_t seqid);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

} // namespace

#endif
