/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "MyType_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace sonicationhal_thrift {


CMyType::~CMyType() throw() {
}


void CMyType::__set_buffer(const std::string& val) {
  this->buffer = val;
}

void CMyType::__set_DisabledChannels(const int32_t val) {
  this->DisabledChannels = val;
}

void CMyType::__set_StripEnableMask(const int8_t val) {
  this->StripEnableMask = val;
}
std::ostream& operator<<(std::ostream& out, const CMyType& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t CMyType::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->buffer);
          this->__isset.buffer = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->DisabledChannels);
          this->__isset.DisabledChannels = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_BYTE) {
          xfer += iprot->readByte(this->StripEnableMask);
          this->__isset.StripEnableMask = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t CMyType::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("CMyType");

  xfer += oprot->writeFieldBegin("buffer", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeBinary(this->buffer);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("DisabledChannels", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->DisabledChannels);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("StripEnableMask", ::apache::thrift::protocol::T_BYTE, 3);
  xfer += oprot->writeByte(this->StripEnableMask);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(CMyType &a, CMyType &b) {
  using ::std::swap;
  swap(a.buffer, b.buffer);
  swap(a.DisabledChannels, b.DisabledChannels);
  swap(a.StripEnableMask, b.StripEnableMask);
  swap(a.__isset, b.__isset);
}

CMyType::CMyType(const CMyType& other0) {
  buffer = other0.buffer;
  DisabledChannels = other0.DisabledChannels;
  StripEnableMask = other0.StripEnableMask;
  __isset = other0.__isset;
}
CMyType& CMyType::operator=(const CMyType& other1) {
  buffer = other1.buffer;
  DisabledChannels = other1.DisabledChannels;
  StripEnableMask = other1.StripEnableMask;
  __isset = other1.__isset;
  return *this;
}
void CMyType::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "CMyType(";
  out << "buffer=" << to_string(buffer);
  out << ", " << "DisabledChannels=" << to_string(DisabledChannels);
  out << ", " << "StripEnableMask=" << to_string(StripEnableMask);
  out << ")";
}

} // namespace
