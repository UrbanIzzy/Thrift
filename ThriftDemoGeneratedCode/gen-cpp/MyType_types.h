/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef MyType_TYPES_H
#define MyType_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/stdcxx.h>


namespace sonicationhal_thrift {

class CMyType;

typedef struct _CMyType__isset {
  _CMyType__isset() : buffer(false), DisabledChannels(false), StripEnableMask(false) {}
  bool buffer :1;
  bool DisabledChannels :1;
  bool StripEnableMask :1;
} _CMyType__isset;

class CMyType : public virtual ::apache::thrift::TBase {
 public:

  CMyType(const CMyType&);
  CMyType& operator=(const CMyType&);
  CMyType() : buffer(), DisabledChannels(0), StripEnableMask(0) {
  }

  virtual ~CMyType() throw();
  std::string buffer;
  int32_t DisabledChannels;
  int8_t StripEnableMask;

  _CMyType__isset __isset;

  void __set_buffer(const std::string& val);

  void __set_DisabledChannels(const int32_t val);

  void __set_StripEnableMask(const int8_t val);

  bool operator == (const CMyType & rhs) const
  {
    if (!(buffer == rhs.buffer))
      return false;
    if (!(DisabledChannels == rhs.DisabledChannels))
      return false;
    if (!(StripEnableMask == rhs.StripEnableMask))
      return false;
    return true;
  }
  bool operator != (const CMyType &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CMyType & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CMyType &a, CMyType &b);

std::ostream& operator<<(std::ostream& out, const CMyType& obj);

} // namespace

#endif
